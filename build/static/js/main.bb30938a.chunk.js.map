{"version":3,"sources":["Constants.js","components/VideoScreen.js","components/NewRoomScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PLAY","PAUSE","SYNC_TIME","NEW_VIDEO","ASK_FOR_VIDEO_URL","SYNC_VIDEO_INFORMATION","ASK_FOR_VIDEO_INFORMATION","JOIN_ROOM","io","require","socketUrl","opts","height","width","playerVars","controls","rel","modestbranding","autoplay","VideoScreen","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","username","room","socket","player","videoUrl","initSocket","on","emit","console","log","playVideo","pauseVideo","currentTime","syncTime","loadVideoById","videoId","getYoutubeIdByUrl","setState","data","url","getVideoUrl","getCurrentTime","startSeconds","seekTo","undefined","replace","split","onReady","e","target","onStateChanged","getPlayerState","handleSubmit","preventDefault","handleChange","value","inherits","createClass","key","props","react_default","a","createElement","YouTube","onStateChange","className","onSubmit","type","placeholder","onChange","Component","NewRoomScreen","defineProperty","id","required","App","currentScreen","components_NewRoomScreen","components_VideoScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb30938a.chunk.js","sourcesContent":["module.exports = {\r\n  PLAY: 'PLAY',\r\n  PAUSE: 'PAUSE',\r\n  SYNC_TIME: 'SYNC_TIME',\r\n  NEW_VIDEO: 'NEW_VIDEO',\r\n  ASK_FOR_VIDEO_URL: 'ASK_FOR_VIDEO_URL',\r\n  SYNC_VIDEO_INFORMATION: 'SYNC_VIDEO_INFORMATION',\r\n  ASK_FOR_VIDEO_INFORMATION: 'ASK_FOR_VIDEO_INFORMATION',\r\n  JOIN_ROOM: 'JOIN_ROOM'\r\n}","import React, { Component } from 'react'\r\nimport YouTube from 'react-youtube';\r\nimport { PLAY, PAUSE, SYNC_TIME, NEW_VIDEO, ASK_FOR_VIDEO_INFORMATION, SYNC_VIDEO_INFORMATION, JOIN_ROOM } from '../Constants'\r\n\r\nvar io = require('socket.io-client')\r\nconst socketUrl = \"/\"\r\n\r\nconst opts = {\r\n  height: '390',\r\n  width: '640',\r\n  playerVars: { // https://developers.google.com/youtube/player_parameters\r\n    controls: 2,\r\n    rel: 0,\r\n    modestbranding: 1,\r\n    autoplay: 1,\r\n  }\r\n}\r\n\r\nexport class VideoScreen extends Component {\r\n\r\n  state = {\r\n    username: '',\r\n    room: '',\r\n    socket: null,\r\n    player: null,\r\n    videoUrl: 'https://www.youtube.com/watch?v=RsGDjyWHBA0'\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      username: this.props.username,\r\n      room: this.props.room\r\n    })\r\n  }\r\n\r\n  initSocket = (socket) => {\r\n    socket.on('connect', () => {\r\n      socket.emit(JOIN_ROOM, this.state.room);\r\n      socket.emit(ASK_FOR_VIDEO_INFORMATION);\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      console.log(\"Disconnected\")\r\n    });\r\n\r\n    socket.on(PLAY, () => {\r\n      this.state.player.playVideo();\r\n    });\r\n\r\n    socket.on(PAUSE, () => {\r\n      this.state.player.pauseVideo();\r\n    });\r\n\r\n    socket.on(SYNC_TIME, (currentTime) => {\r\n      this.syncTime(currentTime);\r\n    })\r\n\r\n    socket.on(NEW_VIDEO, (videoUrl) => {\r\n      this.state.player.loadVideoById({\r\n        videoId: this.getYoutubeIdByUrl(videoUrl)\r\n      })\r\n      this.setState({\r\n        videoUrl: ''\r\n      })\r\n    })\r\n\r\n    socket.on(ASK_FOR_VIDEO_INFORMATION, () => {\r\n      const data = {\r\n        url: this.state.player.getVideoUrl(),\r\n        currentTime: this.state.player.getCurrentTime()\r\n      }\r\n      socket.emit(SYNC_VIDEO_INFORMATION, data);\r\n    });\r\n\r\n    socket.on(SYNC_VIDEO_INFORMATION, (data) => {\r\n      const videoId = this.getYoutubeIdByUrl(data.url)\r\n      this.state.player.loadVideoById({\r\n        videoId: videoId,\r\n        startSeconds: data.currentTime\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n  syncTime = (currentTime) => {\r\n    if (this.state.player.getCurrentTime() < currentTime - 0.2 || this.state.player.getCurrentTime() > currentTime + 0.2) {\r\n      this.state.player.seekTo(currentTime);\r\n      this.state.player.playVideo();\r\n    }\r\n  }\r\n\r\n  getYoutubeIdByUrl = (url) => {\r\n    var ID = '';\r\n    \r\n    url = url.replace(/(>|<)/gi,'').split(/(vi\\/|v=|\\/v\\/|youtu\\.be\\/|\\/embed\\/)/);\r\n\r\n    if(url[2] !== undefined) {\r\n      ID = url[2].split(/[^0-9a-z_-]/i);\r\n      ID = ID[0];\r\n    }\r\n    else {\r\n      ID = url;\r\n    }\r\n    return ID;\r\n  }\r\n\r\n  onReady = (e) => {\r\n    this.setState({\r\n      player: e.target\r\n    })\r\n\r\n    // Socket\r\n    const socket = io(socketUrl);\r\n    this.setState({socket})\r\n    this.initSocket(socket);\r\n  }\r\n\r\n  onStateChanged = (e) => {\r\n    switch (this.state.player.getPlayerState()) {\r\n      case -1:\r\n        this.state.socket.emit(PLAY);\r\n        break;\r\n      case 0:\r\n        break;\r\n      case 1:\r\n        this.state.socket.emit(SYNC_TIME, this.state.player.getCurrentTime());\r\n        this.state.socket.emit(PLAY);\r\n        break;\r\n      case 2:\r\n        this.state.socket.emit(PAUSE);\r\n        break;\r\n      case 3:\r\n        this.state.socket.emit(SYNC_TIME, this.state.player.getCurrentTime());\r\n        break;\r\n      case 5:\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  \r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.state.socket.emit(NEW_VIDEO, this.state.videoUrl);\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      videoUrl: e.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <YouTube \r\n          //videoId=\"rTs4ZpM3xWs\"\r\n          videoId=\"RsGDjyWHBA0\"\r\n          opts={opts}\r\n          onReady={this.onReady}\r\n          onStateChange={this.onStateChanged}\r\n          className=\"yt\"\r\n        />\r\n\r\n        <form onSubmit={this.handleSubmit}>\r\n            <input type=\"text\" placeholder=\"URL eingeben\" value={this.state.videoUrl} onChange={this.handleChange} />\r\n            <button type=\"submit\">Load new Video</button>\r\n          </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default VideoScreen\r\n","import React, { Component } from 'react'\r\n\r\nexport class NewRoomScreen extends Component {\r\n\r\n  state = {\r\n    room: '',\r\n    username: '',\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id] : e.target.value\r\n    })\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state.username, this.state.room);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Create or join room</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input type=\"text\" placeholder=\"roomname\" id=\"room\" onChange={this.handleChange} required />\r\n          <input type=\"text\" placeholder=\"username\" id=\"username\" onChange={this.handleChange} required />\r\n          <button>Create/Join</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NewRoomScreen\r\n","import React, { Component } from 'react';\r\nimport VideoScreen from './components/VideoScreen';\r\nimport NewRoomScreen from './components/NewRoomScreen';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    username: '',\r\n    room: '',\r\n    currentScreen: 'default',\r\n  }\r\n\r\n  onSubmit = (username, room) => {\r\n    this.setState({\r\n      username,\r\n      room,\r\n      currentScreen: 'VideoScreen'\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.currentScreen === 'default') {\r\n      return <NewRoomScreen onSubmit={this.onSubmit}/>\r\n    }\r\n    if (this.state.currentScreen === 'VideoScreen') {\r\n      return <VideoScreen room={this.state.room} username={this.state.username}/>\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}